{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","headers","Authorization","fetch","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3f38a68.chunk.js","sourcesContent":["\r\n\r\nlet accessToken;\r\nconst clientId = '16916fc3cb2f452fac68242c57634cdf';\r\nconst redirectUri = 'https://arjiq.github.io/jammming';\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken\r\n      } \r\n  \r\n      // Checks for access token match. Each returned value will be an array.\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n  \r\n        // Clears parameters and allows us to grab new Access Token when one expires\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {Authorization: `Bearer ${accessToken}`};\r\n  \r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: headers}\r\n      ).then(response => {\r\n        return response.json()\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        } \r\n        return jsonResponse.tracks.items.map(track => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri,\r\n          }\r\n        });\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {Authorization: `Bearer ${accessToken}`};\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {\r\n        headers: headers\r\n      }).then(response => {\r\n        return response.json()\r\n      }).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name}),\r\n        }).then(response => {\r\n          return response.json()\r\n        }).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris}),\r\n          })\r\n        })\r\n      })\r\n    },\r\n  }    \r\n        \r\n  export default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport default class SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term:''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"  onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\n class Track extends React.Component {\r\n     constructor(props) {\r\n         super(props);\r\n         this.addTrack = this.addTrack.bind(this);\r\n         this.removeTrack = this.removeTrack.bind(this);\r\n     }\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    \r\n        render() {\r\n            return (\r\n                <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                  <h3>{this.props.track.name}</h3>\r\n                  <p> {this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                    {this.renderAction()}\r\n                </div> \r\n            )\r\n        }\r\n    }\r\n    \r\n    export default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n               {this.props.tracks.map((track) => \r\n                <Track \r\n                track={track} \r\n                key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>)} \r\n            \r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                {/*Pass the search results from the SearchResults component to the TrackList component.*/}\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n class Playlist extends React.Component {\r\n     constructor(props) {\r\n         super(props);\r\n\r\n         this.handleNameChange = this.handleNameChange.bind(this);\r\n     }\r\n     handleNameChange(event) {\r\n         this.props.onNameChange(event.target.value);\r\n        \r\n     }\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n\r\n                {/*Here we Pass the playlist tracks from the Playlist component to the TrackList component.*/}\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      //Hardcoded results for this.state.searchResults containing array of track objects\n      searchResults: [],\n      playlistName: '',\n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks\n      if(tracks.find(savedTrack => \n        savedTrack.id === track.id)) {\n          return;\n        }\n        else {\n          tracks.push(track);\n          this.setState({playlistTracks: tracks});\n        }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !==track.id);\n    this.setState({playlistTracks: tracks});\n  }\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    \n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ \n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          \n        <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n\n        \n        <Playlist playlistName={this.state.playlistName}\n        playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName}  onSave={this.savePlaylist}/>\n    </div>\n  </div>\n</div>\n    )\n  }\n\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}